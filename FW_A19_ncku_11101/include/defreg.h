#ifndef _DEFREG_H_
#define _DEFREG_H_


 #define LDR_INFO_BASE   0xB00C2000   
#define GDMA_REG_BASE   0xB0004000
#define ESYS_REG_BASE   0xB0004100
#define HWS_REG_BASE	   0xB0004300
#define SATA_REG_BASE   0xB0005000
#define FLASH_REG_BASE  0xB0010000
#define FLASH_MEM_BASE  0xB0080000
#define FLASH_SPA_BASE  0xB00C0000
#define GPIO_REG_BASE   0xB8000000
#define UART_REG_BASE   0xB8001000
#define TMR_REG_BASE    0xB8002000
#define INTC_REG_BASE   0xB8003000
#define SPI_REG_BASE    0xB8004000

 #define rF_DRAM_PWN				(*(volatile dword *)(GDMA_REG_BASE + 0x0200))
	#define DRAM_POWER_SAVING_EN            (1<<0)

 #define rF_CLK_CTL               (*(volatile dword *)(ESYS_REG_BASE + 0x0000))
#define rF_ESYS_CTL				   (*(volatile dword *)(ESYS_REG_BASE + 0x0000))
  #define SYS_HWCLK                (1<<16)  
  #define SYS_500MHZ               (1<<17)  
  #define SYS_375MHZ               (1<<18)  
  #define SYS_300MHZ               (1<<19)  
  #define SYS_250MHZ               (1<<20)  
  #define SYS_187MHZ               (1<<21)  
  #define SYS_150MHZ               (1<<22)  
  #define SYS_CLKS                 (1<<23)  
  #define SYS_25MHZ         	     (1<<24)  
  #define SYS_CLK_DIV_8				  (0x30000000)  
  #define SYS_CLK_DIV_64			  (0x60000000)  
  #define SYS_CLK_DIV_128			  (0x70000000)  
  #define SYS_CLK_DIV_256			  (0x80000000)  
  #define SYS_CLK_DIV_512			  (0x90000000)  
  #define SYS_CLK_DIV_1024			  (0xA0000000)  
   
  #define SYS_BIAS_EN				(1<<0)
 
#define rF_ESYS_SRAM_CTL		(*(volatile dword *)(ESYS_REG_BASE + 0x0004))
#define rF_ESYS_STATUS			(*(volatile dword *)(ESYS_REG_BASE + 0x0008))
#define rF_ESYS_CLK_RDY			(*(volatile byte *)(ESYS_REG_BASE + 0x0010))
	#define SYS_CLK_RDY				(1<<0)
	#define DRAM_CLK_RDY			(1<<1)

 #define rF_DRAM_CTRL_F0			   (*(volatile dword *)(GDMA_REG_BASE+0x2F0))
  #define RST_DRAM_CMD_FIFO     (1<<0)

 #define rF_HWS_CTL				(*(volatile dword *)(HWS_REG_BASE + 0x0000))
	#define HWS_EN					(1<<0)
	#define HWS_MODE_EN				(1<<1)
	#define HWS_INT_MASK			(1<<2)
	#define HWS_INT_CLR				(1<<3)
	
#define rF_HWS_SRCADDR			(*(volatile dword *)(HWS_REG_BASE + 0x0004))
#define rF_HWS_RANGE			(*(volatile dword *)(HWS_REG_BASE + 0x0008))
#define rF_HWS_PTR12			(*(volatile dword *)(HWS_REG_BASE + 0x0010))
#define rF_HWS_PTR34			(*(volatile dword *)(HWS_REG_BASE + 0x0014))
#define rF_HWS_PTR56			(*(volatile dword *)(HWS_REG_BASE + 0x0018))
#define rF_HWS_PTR78			(*(volatile dword *)(HWS_REG_BASE + 0x001C))
#define rF_HWS_TOTAL_SUM		(*(volatile dword *)(HWS_REG_BASE + 0x0020))
	#define HWS_INT_BIT				(1<<16)
	#define HWS_TOTAL_SUM_MASK		(0x7FF)
	
 #define REG_R0000				(*(volatile dword *)(SATA_REG_BASE + 0x0000))   
#define REG_SECTCNT				(*(volatile byte  *)(SATA_REG_BASE + 0x0000))
#define REG_SECTCNT_EXP			(*(volatile byte  *)(SATA_REG_BASE + 0x0001))
#define REG_COMMAND				(*(volatile byte  *)(SATA_REG_BASE + 0x0002))
#define REG_FEATURE				(*(volatile byte  *)(SATA_REG_BASE + 0x0003))

#define REG_R0004				(*(volatile dword *)(SATA_REG_BASE + 0x0004))   
#define REG_SECTNUM				(*(volatile byte  *)(SATA_REG_BASE + 0x0004))
#define REG_CYLINDER_LOW		(*(volatile byte  *)(SATA_REG_BASE + 0x0005))
#define REG_CYLINDER_HIGH		(*(volatile byte  *)(SATA_REG_BASE + 0x0006))
#define REG_DEV					(*(volatile byte  *)(SATA_REG_BASE + 0x0007))

#define REG_R0008				(*(volatile dword *)(SATA_REG_BASE + 0x0008))   
#define REG_SECTNUM_EXP			(*(volatile byte  *)(SATA_REG_BASE + 0x0008))
#define REG_CYLINDER_LOW_EXP	(*(volatile byte  *)(SATA_REG_BASE + 0x0009))
#define REG_CYLINDER_HIGH_EXP	(*(volatile byte  *)(SATA_REG_BASE + 0x000A))
#define REG_FEATURE_EXP			(*(volatile byte  *)(SATA_REG_BASE + 0x000B))

#define REG_R000C				(*(volatile dword *)(SATA_REG_BASE + 0x000C))   
	#define TRANS_LAYER_IDLE         (1 << 7)
#define REG_TAG					(*(volatile byte  *)(SATA_REG_BASE + 0x000C))
#define REG_ERROR				(*(volatile byte  *)(SATA_REG_BASE + 0x000D))
#define REG_STATUS				(*(volatile byte  *)(SATA_REG_BASE + 0x000E))
#define REG_E_STATUS			(*(volatile byte  *)(SATA_REG_BASE + 0x000F))

#define REG_R0010				(*(volatile dword *)(SATA_REG_BASE + 0x0010))   
#define REG_ICADN				(*(volatile byte  *)(SATA_REG_BASE + 0x0010))
#define REG_CONTROL				(*(volatile byte  *)(SATA_REG_BASE + 0x0011))
#define REG_FISTYPE				(*(volatile byte  *)(SATA_REG_BASE + 0x0013))
	#define R0010_DBIT_ON            (1 << 1)
	#define R0010_DBIT_OFF           (0)
	#define R0010_ABIT_ON            (1 << 2)
	#define R0010_ABIT_OFF           (0)
	#define R0010_CBIT_ON            (1 << 3)
	#define R0010_CBIT_OFF           (0)
	#define R0010_IBIT_ON            (1 << 4)
	#define R0010_IBIT_OFF           (0)
#define REG_BUFOFFSET			(*(volatile dword *)(SATA_REG_BASE + 0x0014))
#define REG_TRANSZ				(*(volatile dword *)(SATA_REG_BASE + 0x0018))

#define REG_BIST_DATA0			(*(volatile dword *)(SATA_REG_BASE + 0x0020))
#define REG_BIST_DATA1			(*(volatile dword *)(SATA_REG_BASE + 0x0024))

#define REG_SYS_CTRL			(*(volatile dword *)(SATA_REG_BASE + 0x0028))
	#define SYSCTRL_SET_DEVMODE()				do { REG_SYS_CTRL &= 0x7FFFFFFF; } while(0)
	#define SYSCTRL_FORCE_PHYRDY()				(REG_SYS_CTRL |= (1 << 4))
	#define SYSCTRL_PARTIAL_REQ_START()			(REG_SYS_CTRL |= (1 << 8))
	#define SYSCTRL_PARTIAL_REQ_END()			(REG_SYS_CTRL &= (~(1 << 8)))
	#define SYSCTRL_SLUMBER_REQ_START()			(REG_SYS_CTRL |= (1 << 9))
	#define SYSCTRL_SLUMBER_REQ_END()			(REG_SYS_CTRL &= (~(1 << 9)))
	#define SYSCTRL_WAKEUP_INTERFACE_START()	(REG_SYS_CTRL |= (1 << 10))
	#define SYSCTRL_WAKEUP_INTERFACE_END()		(REG_SYS_CTRL &= (~(1 << 10)))
	#define SYSCTRL_FRC_TRAN_CNT()				(REG_SYS_CTRL |= (1 << 14))
	#define SYSCTRL_AUTO_TRAN_CNT()				(REG_SYS_CTRL &= (~(1 << 14)))
	#define SYSCTRL_STOP_SOME_CLKS()			(REG_SYS_CTRL |= (1 << 16))
	#define SYSCTRL_START_ALL_CLKS()			(REG_SYS_CTRL &= (~(1 << 16)))
	#define SYSCTRL_SET_PMACK(n)				{\
													REG_SYS_CTRL &= (~(3 << 17)); \
													REG_SYS_CTRL |= (n << 17); \
												} 
	#define SYSCTRL_SUPPRESS_FIS39_IF_RERR()	(REG_SYS_CTRL |= (1 << 19))
	#define SYSCTRL_ENABLE_FIS39_IF_RERR()		(REG_SYS_CTRL &= (~(1 << 19)))
	#define SYSCTRL_LOCK_RX()					(REG_SYS_CTRL |= (1 << 20))
	#define SYSCTRL_UNLOCK_RX()					(REG_SYS_CTRL &= (~(1 << 20)))
	#define SYSCTRL_REC_NOWAIT()				(REG_SYS_CTRL |= (1 << 21))
	#define SYSCTRL_IS_RX_LOCKED()				(REG_SYS_CTRL & (1 << 24))
#define REG_FIFOCTRL             (*(volatile dword *)(SATA_REG_BASE + 0x002C))
   
  #define FIFOCTRL_FLUSH_CMDOUTFIFO_START()   (REG_FIFOCTRL |= (1 << 13))
  #define FIFOCTRL_FLUSH_CMDINFIFO_START()    (REG_FIFOCTRL |= (1 << 12))
  #define FIFOCTRL_FLUSH_CMDOUTFIFO_FINISH()  (REG_FIFOCTRL &= (~(1 << 13)))
  #define FIFOCTRL_FLUSH_CMDINFIFO_FINISH()   (REG_FIFOCTRL &= (~(1 << 12)))
  #define IS_FF_CMDA2T_EMPTY()                (REG_FIFOCTRL & 0x00000100)
  #define IS_FF_CMDT2A_EMPTY()                (REG_FIFOCTRL & 0x00000400)
  
  #define IS_FF_A2T_EMPTY()                (REG_FIFOCTRL & 0x00000010)
  #define IS_FF_T2A_EMPTY()                (REG_FIFOCTRL & 0x00000002)
  #define FIFOCTRL_FLUSH_OUTFIFO_START()   (REG_FIFOCTRL |= (1 << 2))
  #define FIFOCTRL_FLUSH_INFIFO_START()    (REG_FIFOCTRL |= (1 << 3))
  #define FIFOCTRL_FLUSH_OUTFIFO_FINISH()  (REG_FIFOCTRL &= (~(1 << 2)))
  #define FIFOCTRL_FLUSH_INFIFO_FINISH()   (REG_FIFOCTRL &= (~(1 << 3)))

#define REG_IPMINFO				(*(volatile byte  *)(SATA_REG_BASE + 0x0030))
#define REG_SRSTINFO			(*(volatile byte  *)(SATA_REG_BASE + 0x0031))

#define REG_SCR0_SSTATUS		(*(volatile dword *)(SATA_REG_BASE + 0x0040))
	#define IS_DEV_DECTED_PHY_ESTABLISHED()		((REG_SCR0_SSTATUS & 0x0000000F) == 0x00000003)
	#define IS_DEV_STAY_ACTIVE_MODE()			((REG_SCR0_SSTATUS & 0x00000F00) == 0x00000100)
	#define IS_DEV_STAY_PARTIAL_MODE()			((REG_SCR0_SSTATUS & 0x00000F00) == 0x00000200)
	#define IS_DEV_STAY_SLUMBER_MODE()			((REG_SCR0_SSTATUS & 0x00000F00) == 0x00000600)
	#define SATA_SPD							(0xf0)
	#define SATA_GEN1							(1<<4)
	#define SATA_GEN2							(2<<4)
	#define SATA_GEN3							(3<<4)
  
#ifdef JMF667_SATA  
#define REG_SYS_CTRL2             (*(volatile dword  *)(SATA_REG_BASE + 0x0034))
	#define IS_SRST_LOCKED()                		(REG_SYS_CTRL2 & 0x40000000)
	#define SYSCTRL2_AUTO_WAKEUP_DISABLE				(1 << 29)	
  #define SYSCTRL2_SRST_SET_UNLOCK_START()          (REG_SYS_CTRL2 |= (1 << 25))
  #define SYSCTRL2_SRST_SET_UNLOCK_FINISH()          (REG_SYS_CTRL2 &= (~(1 << 25)))
  #define SYSCTRL2_EN_SRST_LOCK()             (REG_SYS_CTRL2 |= (1 << 24))
  #define SYSCTRL2_OLD_FIS27_MECHANISM        (1 << 22)
  #define SYSCTRL2_NEW_TX_CTL_MECHANISM       (1 << 21)
#endif //~ JMF667_SATA  
  
#define REG_SCR1_SERROR			(*(volatile dword *)(SATA_REG_BASE + 0x0044))
	#define SCR1_ERR_I               (1 << 0)
	#define SCR1_ERR_M               (1 << 1)
	#define SCR1_ERR_T               (1 << 8)
	#define SCR1_ERR_C               (1 << 9)
	#define SCR1_ERR_P               (1 << 10)
	#define SCR1_ERR_E               (1 << 11)
	#define SCR1_DIAG_N              (1 << 16)
	#define SCR1_DIAG_I              (1 << 17)
	#define SCR1_DIAG_W              (1 << 18)
	#define SCR1_DIAG_B              (1 << 19)
	#define SCR1_DIAG_D              (1 << 20)
	#define SCR1_DIAG_C              (1 << 21)
	#define SCR1_DIAG_H              (1 << 22)
	#define SCR1_DIAG_S              (1 << 23)
	#define SCR1_DIAG_T              (1 << 24)
	#define SCR1_DIAG_F              (1 << 25)
	#define SCR1_DIAG_X              (1 << 26)
	#define SCR1_DIAG_A              (1 << 27)
#define REG_SCR2_SCONTROL		(*(volatile dword *)(SATA_REG_BASE + 0x0048))
#define REG_SCR3_SACTIVE		(*(volatile dword *)(SATA_REG_BASE + 0x004C))
#define REG_SCR4_RESERVE		(*(volatile dword *)(SATA_REG_BASE + 0x0050))

#define REG_INTEN				(*(volatile dword *)(SATA_REG_BASE + 0x005C))
#define REG_INTRSNCLR			(*(volatile dword  *)(SATA_REG_BASE + 0x0060))
	#define INT_DMAT_RECIV           (1 << 31)
    
   #define INT_UNKNOWN_FIS_RECIV    (1 << 30)
   #define INT_RFIS_CRC_ERR    		 (1 << 29)	
   #define INT_COMINIT_RSN				   (1 << 25)  
   #define INT_COMWAKE_RSN				   (1 << 24)
	#define INT_NCQ_CMD_DONE         (1 << 15)
	#define INT_NCQ_CMD_VALID        (1 << 14)
	#define INT_NCQ_CMD_ERR          (1 << 13)
	#define INT_PHYRDY_CHANGE_FLN    (1 << 12)
	#define INT_SATA_LINK_ERR        (1 << 11)
	#define INT_AHB_ERR              (1 << 10)
	#define INT_DMA_DONE_EOT_OFF     (1 << 9)
	#define INT_DMA_DONE_EOT_ON      (1 << 8)
	#define INT_PHYRDY_CHANGE        (1 << 7)
	#define INT_PHYRDY_CHANGE_RSN    (1 << 7)
	#define INT_SATA_ERR             (1 << 6)
	#define INT_PIOSETUP_RECIV       (1 << 5)
	#define INT_BIST_ACT             (1 << 4)
	#define INT_DMASETUP_RECIV       (1 << 3)
	#define INT_TXRX_OK              (1 << 2)
	#define INT_SETDEVFIS_RECIV      (1 << 1)
	#define INT_REGFIS_RECIV         (1 << 0)
#define REG_MSGINFO				(*(volatile byte  *)(SATA_REG_BASE + 0x0064))
	#define MSGINFO_NDFT             (0)   
	#define MSGINFO_DATAOK           (1)   
	#define MSGINFO_DATAERR          (2)   
	#define MSGINFO_SLTERR           (3)   
	#define MSGINFO_PHYRDYCHG        (4)   

#define REG_NCQ_MSGINFO			(*(volatile byte  *)(SATA_REG_BASE + 0x0065))
	#define NCQ_MSGINFO_ACC_ERR			(1 << 0)
	#define NCQ_MSGINFO_CMD_DONE		(1 << 1)
	#define NCQ_MSGINFO_UNC_ERR			(1 << 2)
	#define NCQ_MSGINFO_LBA_OVER		(1 << 4)
	#define NCQ_MSGINFO_TAG_DUP			(1 << 5)
	#define NCQ_MSGINFO_NON_NCQ			(1 << 6)
	#define NCQ_MSGINFO_DATA_ERR		(1 << 7)
	#define NCQ_ACC_ERR()				(REG_NCQ_CMD_VALID && ((REG_NCQ_MSGINFO & (NCQ_MSGINFO_CMD_DONE | NCQ_MSGINFO_ACC_ERR)) == NCQ_MSGINFO_ACC_ERR))

#define REG_RAWINTRSNCLR		(*(volatile word  *)(SATA_REG_BASE + 0x0068))

#define REG_PRD_TABLE_BASE		(*(volatile dword *)(SATA_REG_BASE + 0x0070))
	#define SATA_PRD_EOT             (0x80000000)
#define REG_AHB_MASTER_CTRL		(*(volatile byte  *)(SATA_REG_BASE + 0x0074))
	#define AMC_AHB_SIZE             (1 << 7)
	#define AMC_ENA_512B_BURST       (1 << 6)   
	#define AMC_DIS_B2B_BURST        (1 << 5)
	#define AMC_WAIT_FIS39           (1 << 4)
	#define AMC_EFFICIENT_AHB        (1 << 3)
	#define AMC_STOP_DMA_START()     (REG_AHB_MASTER_CTRL |= (1 << 2))
	#define AMC_STOP_DMA_END()       (REG_AHB_MASTER_CTRL &= ~(1 << 2))
	#define AMC_WRITE_MEM            (1 << 1)
	#define AMC_READ_MEM             (0 << 1)
	#define AMC_START_AHB_MASTER     (1 << 0)
#define REG_AHB_STS				(*(volatile byte  *)(SATA_REG_BASE + 0x0075))
	#define AS_MASTER_ACT            (1 << 0)   
	#define AS_MASTER_DEACT          (0 << 0)
	#define AS_EARLY_TERMINATE       (1 << 1)

#define REG_PRD_RES_BYTE_COUNT	(*(volatile dword *)(SATA_REG_BASE + 0x0078))

#define REG_DPREGION			(*(volatile dword *)(SATA_REG_BASE + 0x0080))
#define REG_DMACTRL				(*(volatile dword *)(SATA_REG_BASE + 0x0084))
#define REG_COMPR_SPBA			(*(volatile dword *)(SATA_REG_BASE + 0x008C))
#define REG_DATAPORT(n)			(*(volatile dword *)(SATA_REG_BASE + 0x0400+(n<<2)))


 

#define REG_ACTL_TOP			(*(volatile dword *)(SATA_REG_BASE+0xC00))
#define REG_ACTL_PLL			(*(volatile dword *)(SATA_REG_BASE+0xC04))
#define REG_ACTL_PLL2	         (*(volatile dword *)(SATA_REG_BASE+0xC08))
#define REG_ACTL_SPM1	         (*(volatile dword *)(SATA_REG_BASE+0xC0C))
#define REG_ACTL_SPM2	         (*(volatile dword *)(SATA_REG_BASE+0xC10))
#define REG_ACTL_SPM3	         (*(volatile dword *)(SATA_REG_BASE+0xC14))
#define REG_ACTL_SPM4	         (*(volatile dword *)(SATA_REG_BASE+0xC18))

#define REG_ACTL_PLL3	         (*(volatile dword *)(SATA_REG_BASE+0xC5C))
#define REG_ACTL_PLL4	         (*(volatile dword *)(SATA_REG_BASE+0xC60))

#define REG_ACTL_PORT			(*(volatile dword *)(SATA_REG_BASE+0xC0C))
#define REG_ACTL_TSEQD			(*(volatile dword *)(SATA_REG_BASE+0xC10))			 
#define REG_ACTL_EQ_CTRL		(*(volatile dword *)(SATA_REG_BASE+0xC14))			 
#define REG_ACTL_TX				(*(volatile dword *)(SATA_REG_BASE+0xC18))			 
#define REG_ACTL_CDR			(*(volatile dword *)(SATA_REG_BASE+0xC1C))
#define REG_SLEW_TIME_LIM		(*(volatile dword *)(SATA_REG_BASE+0xC20))
#define REG_ACTL_EQ_CONS		(*(volatile dword *)(SATA_REG_BASE+0xC24))
#define REG_ACTL_DC_OFFSET       (*(volatile dword *)(SATA_REG_BASE+0xC28))
#define REG_ACTL_DIGIT			(*(volatile dword *)(SATA_REG_BASE+0xC2C))
	#define AD_PHY_POWER_ON			(1 << 11)  	 
  
#define REG_ACTL_OOB_TIME        (*(volatile dword *)(SATA_REG_BASE+0xC30))  
#define REG_ACTL_OOB_WAKE        (*(volatile dword *)(SATA_REG_BASE+0xC40))
	#define ACTL_FORCE_SLUMBER			 (1 << 22)
	#define ACTL_PHY_LOCK						 (1 << 21)
	#define ACTL_IPM_APS_ENABLE			 (1 << 20)	
	#define ACTL_REMOVE_ALIGN				 (1 << 18)
#define REG_ACTL_SYS			(*(volatile dword *)(SATA_REG_BASE+0xC48))
#define REG_ACTL_PHY_SSC		(*(volatile dword *)(SATA_REG_BASE+0xC4C))
#define REG_ACTL_RX_ERR			(*(volatile dword *)(SATA_REG_BASE+0xC50))
#define REG_ACTL_IDDQ	         (*(volatile dword *)(SATA_REG_BASE+0xC58))

 #define REG_NCQ_CMD_VALID		(*(volatile dword *)(SATA_REG_BASE + 0x00A0))
#define REG_NCQ_D2H_STATUS		(*(volatile dword *)(SATA_REG_BASE + 0x00A4))
#define REG_NCQ_DMA_STATUS		(*(volatile dword *)(SATA_REG_BASE + 0x00A8))
#define REG_NCQ_DMA_ERR			(*(volatile dword *)(SATA_REG_BASE + 0x00AC))

#define REG_NCQ_RUN_TAG			(*(volatile byte *)(SATA_REG_BASE + 0x00B0))
#define REG_NCQ_RUN_SEQ			(*(volatile byte *)(SATA_REG_BASE + 0x00B1))
#define REG_NCQ_CTRL			   (*(volatile byte *)(SATA_REG_BASE + 0x00B2))
	#define NCQ_SET_MINSEQ_CHK		         (1 << 7)
	#define NCQ_FROCE_DMA_HALT_START()     (REG_NCQ_CTRL |= (1 << 6))
	#define NCQ_FROCE_DMA_HALT_FINISH()    (REG_NCQ_CTRL &= (~(1 << 6)))
	#define NCQ_FW_TAKEOVER			         (1 << 5)
	#define NCQ_DMA_ABORT			         (1 << 4)
	#define NCQ_DISABLE				         (1 << 3)
	#define NCQ_FRC_IDLE			            (1 << 2)
	#define NCQ_FRC_CLR				         (1 << 1)
	#define NCQ_FRC_LOCK			            (1 << 0)

#define REG_NCQ_STATUS			(*(volatile byte *)(SATA_REG_BASE + 0x00B3))
	#define NCQ_LOCK_STS			(1 << 7)
	 
	#define NCQ_UNC_STS				(1 << 5)
  

#define REG_NCQ_MAX_LBA0		(*(volatile word  *)(SATA_REG_BASE + 0x00B4))
#define REG_NCQ_MAX_LBA1		(*(volatile word  *)(SATA_REG_BASE + 0x00B6))
#define REG_NCQ_MAX_LBA2		(*(volatile word  *)(SATA_REG_BASE + 0x00B8))
#define REG_NCQ_MAX_DEPTH		(*(volatile byte  *)(SATA_REG_BASE + 0x00BA))
#define REG_NCQ_MIN_TAG			(*(volatile byte  *)(SATA_REG_BASE + 0x00BB))
#define REG_NCQ_SYS_CTRL		(*(volatile dword *)(SATA_REG_BASE + 0x00BC))
#ifdef JMF667_SATA
	#define NCQ_CLR_NO_FIS_TX_START()		(REG_NCQ_SYS_CTRL |= (1 << 7))
	#define NCQ_CLR_NO_FIS_TX_FINISH()		(REG_NCQ_SYS_CTRL &= (~(1 << 7)))
	#define NCQ_SET_NO_FIS_TX_START()	    (REG_NCQ_SYS_CTRL |= (1 << 6))
	#define NCQ_SET_NO_FIS_TX_FINISH()		(REG_NCQ_SYS_CTRL &= (~(1 << 6)))
#endif //~ JMF667_SATA
	#define NCQ_INC_RUN_SEQ			(1 << 2)
	#define NCQ_AUTO_LOCK			(1 << 1)
	#define NCQ_FPDMA_MANA_CMD		(1 << 0)

 
#define REG_NCQ_MIN_SEQ_TAG		(*(volatile byte *)(SATA_REG_BASE + 0x00C4))
#define REG_NCQ_TAG_FIFO_STS	(*(volatile byte *)(SATA_REG_BASE + 0x00C5))
#define REG_NCQ_TAG_FIFO_CTRL	(*(volatile byte *)(SATA_REG_BASE + 0x00C6))
	#define NCQ_TAG_FIFO_CLR_START()		(REG_NCQ_TAG_FIFO_CTRL |= 0x03)
	#define NCQ_TAG_FIFO_CLR_FINISH()		(REG_NCQ_TAG_FIFO_CTRL &= 0xFC)

#define REG_NCQ_TAG_BMP			(*(volatile dword *)(SATA_REG_BASE + 0x00C0))

#define REG_NCQ_CUR_MIN_SEQ		(*(volatile dword *)(SATA_REG_BASE + 0x00F0))
#define REG_NCQ_IDLE_STS_TAG	(*(volatile dword *)(SATA_REG_BASE + 0x00F4))
#define REG_NCQ_FRC_IDLE_TAG	(*(volatile dword *)(SATA_REG_BASE + 0x00F8))
#define REG_NCQ_FRC_CLR_TAG		(*(volatile dword *)(SATA_REG_BASE + 0x00FC))

#define REG_NCQ_R0000(n)		(*(volatile dword *)(SATA_REG_BASE + 0x0100 + (n<<6)))
#define REG_NCQ_R0001(n)		(*(volatile dword *)(SATA_REG_BASE + 0x0104 + (n<<6)))
#define REG_NCQ_R0002(n)		(*(volatile dword *)(SATA_REG_BASE + 0x0108 + (n<<6)))
#define REG_NCQ_R0003(n)		(*(volatile dword *)(SATA_REG_BASE + 0x010C + (n<<6)))
#define REG_NCQ_R0004(n)		(*(volatile dword *)(SATA_REG_BASE + 0x0110 + (n<<6)))
	#define PRD_V					(1 << 15)
	#define NOT_LAST				(1 << 14)
	#define DMA_STOP				(1 << 13)
	#define SET_UNC					(1 << 12)
	#define AUTO_ACT				(1 << 10)
	#define D2H_HOLD				(1 << 9)
	#define SDB_HOLD				(1 << 8)
	#define DMA_EN					(1 << 0)

#define REG_NCQ_R0005(n)		(*(volatile dword *)(SATA_REG_BASE + 0x0114 + (n<<6)))	 
#define REG_NCQ_R0006(n)		(*(volatile dword *)(SATA_REG_BASE + 0x0118 + (n<<6)))	 
#define REG_NCQ_R0007(n)		(*(volatile dword *)(SATA_REG_BASE + 0x011C + (n<<6)))	 
#define REG_NCQ_R0008(n)		(*(volatile dword *)(SATA_REG_BASE + 0x0120 + (n<<6)))
	#define NCQ_SEQ_NUM(n)			(REG_NCQ_R0008(n) & 0xFFFFFF)
	
#define REG_NCQ_STSERR(n)		(*(volatile dword *)(SATA_REG_BASE + 0x0130 + (n<<6)))

#define REG_SATA_ERR_MSK		(*(volatile dword *)(SATA_REG_BASE + 0x0CFC))

#define REG_SATA_DBG8			(*(volatile dword *)(SATA_REG_BASE + 0x0FE0))

#define rF_ADMA_CTL				   (*(volatile word  *)(FLASH_REG_BASE+0x00))
	#define ADMA_CTL_EN				   (0x0001)
	#define ADMA_CTL_MST			      (0x0002)
	#define ADMA_CTL_S2B			      (0x0004)
	#define ADMA_MULTI_CMD			   (0x0008)
	#define ADMA_CMD_CHK			      (0x0010)
	#define ADMA_SBUF_CHK			   (0x0020)
	#define ADMA_OVERLAP_EN			   (0x0100)
	#define ADMA_WAIT_MODE			   (0x0200)
	#define ADMA_ONE_DMA			      (0x0400)
	#define ADMA_BITMAP_EN			   (0x0800)
	#define ADMA_MAP_SIZE			   (0x1000)
	#define ADMA_MAP_CHK			      (0x2000)
	#define ADMA_MAP_INV			      (0x4000)
	#define ADMA_ASR_CHG			      (0x8000)
#define rF_ADMA_FLAG			      (*(volatile byte  *)(FLASH_REG_BASE+0x02))  
	#define ADMA_8CHAN               (0x70)
	#define ADMA_CTL_FLAG            (0x80)
#define rF_INDEX				      (*(volatile byte  *)(FLASH_REG_BASE+0x03))  
	#define ALL_CHANNEL              (0x08)
#define rF_ADMA_SET				   (*(volatile word  *)(FLASH_REG_BASE+0x04))
	#define ADMA_UNC_ERR             (0x0001)
	#define ADMA_FRC_WAIT            (0x0002)
	#define ADMA_4KB_JUMP            (0x0008)
	#define ADMA_4KB_INDEP           (0x0000)
   #define ADMA_WAIT_BDRY			   (0x0080)  
	#define ADMA_CMPR_SHRINK         (0xFF00)
#define rF_ADMA_MASK			      (*(volatile word  *)(FLASH_REG_BASE+0x06))
#define rF_ABP					      (*(volatile dword *)(FLASH_REG_BASE+0x08))
	 
	#define ADMA_MULTI_EXE      	  (0x080000)
	#define ADMA_FIFO_EMPTY 	     (0x100000)
	#define ADMA_FIFO_FULL    	     (0x200000)
	#define ADMA_CMD_OK			     (0x400000)
	
#define rF_ADMAS				      (*(volatile dword *)(FLASH_REG_BASE+0x0C))
#define rF_PRD_ADR				   (*(volatile dword *)(FLASH_REG_BASE+0x10))
#define rF_BANK_TYPE			      (*(volatile byte  *)(FLASH_REG_BASE+0x14))
	#define BANK_REMAP_NUM           (0x0F)
	#define BANK_REMAP_FRC           (0x10)
	#define BANK_DIRECT              (0x20)
	#define BANK_MULTI_CE            (0x40)
#define rF_ADMA_INT				   (*(volatile byte  *)(FLASH_REG_BASE+0x15))
#define rF_FDMA_INT				   (*(volatile word  *)(FLASH_REG_BASE+0x16))

 
#define rF_BANK_SEL03			   (*(volatile dword *)(FLASH_REG_BASE+0x18))
#define rF_BANK_SEL47			   (*(volatile dword *)(FLASH_REG_BASE+0x1C))
#define rF_BANK_SEL0			      (*(volatile byte  *)(FLASH_REG_BASE+0x18))
#define rF_BANK_SEL1			      (*(volatile byte  *)(FLASH_REG_BASE+0x19))
#define rF_BANK_SEL2			      (*(volatile byte  *)(FLASH_REG_BASE+0x1A))
#define rF_BANK_SEL3			      (*(volatile byte  *)(FLASH_REG_BASE+0x1B))
#define rF_BANK_SEL4			      (*(volatile byte  *)(FLASH_REG_BASE+0x1C))
#define rF_BANK_SEL5			      (*(volatile byte  *)(FLASH_REG_BASE+0x1D))
#define rF_BANK_SEL6			      (*(volatile byte  *)(FLASH_REG_BASE+0x1E))
#define rF_BANK_SEL7			      (*(volatile byte  *)(FLASH_REG_BASE+0x1F))
#define rF_BANK_SEL(n)			   (*(volatile byte  *)(FLASH_REG_BASE+0x18+n))

#define rF_ECC_SET				   (*(volatile dword *)(FLASH_REG_BASE+0x20))
  #define ACCESS_SPARE             (0x000001)
  #define BCH_ENABLE               (0x000002)
  #define BCH_8                    (0x000000)
  #define BCH_16                   (0x000004)
  #define BCH_24                   (0x000008)		 
  #define BCH_40                   (0x00000C)
  #define LDPC_ENABLE              (0x000010)
  #define LDPC_AUTO                (0x000020)
  #define LDPC_JUMP                (0x000040)
  #define LDPC_128Z                (0x000080)
  #define ADVDEC_EN                (0x001000)
  #define ADVDEC_HOLD              (0x002000)
  #define RETRY_EN                 (0x004000)
  #define SFTRD_EN                 (0x008000)		 
  #define SFTRD_1ST                (0x010000)
  #define RETRY_THR                (0x0E0000)
  #define UNC_HALT                 (0x100000)
  #define PTR_KEEP                 (0x200000)
  #define ERSC_NONE					  (0x0C000000)
	  
#define rF_DBG_REG				(*(volatile byte *)(FLASH_REG_BASE+0x24))
#define rF_LDR_PATTERN			(*(volatile dword *)(FLASH_REG_BASE+0x24))
#define rF_FLASH_TYPE			(*(volatile dword *)(FLASH_REG_BASE+0x28))
	#define FL_PAGE_8K				(0x000001)
	#define FL_PAGE_16K				(0x000002)
	#define FL_16BIT				   (0x000004)
	#define FL_1CH_2DIE				(0x000008)
	#define FL_INTEL				   (0x000010)
	#define FL_ROW_MODE				(0x000020)
	#define FL_CACHE_MODE			(0x000040)
	#define FL_COPY_MODE			   (0x000080)
	#define FL_2PL_CMD				(0x000100)
	#define FL_EDO_MODE				(0x000200)
	#define FL_SCR_LOC				(0x008000)
	#define FL_SCR_EN				   (0x010000)
	#define FL_SPCRC_EN				(0x020000)
	#define FL_SPCRC_2K				(0x040000)
	#define FL_SPCRC_4K				(0x080000)
	#define FL_SPARE_4B				(0x200000)
	#define FL_SPARE_8B				(0x400000)
#define rF_FLASH_SIZE			(*(volatile byte  *)(FLASH_REG_BASE+0x2B))
	#define FL_MULTI_PAGE			(0x20)

 
#define rF_RDCMD				(*(volatile byte  *)(FLASH_REG_BASE+0x2C))
#define rF_RDCFM				(*(volatile byte  *)(FLASH_REG_BASE+0x2D))
#define rF_WRCMD				(*(volatile byte  *)(FLASH_REG_BASE+0x2E))
#define rF_WRCFM				(*(volatile byte  *)(FLASH_REG_BASE+0x2F))
#define rF_RD2P1				(*(volatile byte  *)(FLASH_REG_BASE+0x30))
#define rF_RD2P2				(*(volatile byte  *)(FLASH_REG_BASE+0x31))
#define rF_WR2P1				(*(volatile byte  *)(FLASH_REG_BASE+0x32))
#define rF_WR2P2				(*(volatile byte  *)(FLASH_REG_BASE+0x33))
#define rF_RDM_1				(*(volatile byte  *)(FLASH_REG_BASE+0x34))
#define rF_RDM_2				(*(volatile byte  *)(FLASH_REG_BASE+0x35))
#define rF_RDM_3				(*(volatile byte  *)(FLASH_REG_BASE+0x36))
#define rF_STCMD				(*(volatile byte  *)(FLASH_REG_BASE+0x37))
#define rF_RDCPY				(*(volatile byte  *)(FLASH_REG_BASE+0x38))
#define rF_WRCPY				(*(volatile byte  *)(FLASH_REG_BASE+0x39))
#define rF_BSYBIT				(*(volatile byte  *)(FLASH_REG_BASE+0x3A))

 
#define rF_TMC0					(*(volatile byte  *)(FLASH_REG_BASE+0x40))
#define rF_TMC1					(*(volatile byte  *)(FLASH_REG_BASE+0x41))
#define rF_TMC2					(*(volatile byte  *)(FLASH_REG_BASE+0x42))
#define rF_TMC3					(*(volatile byte  *)(FLASH_REG_BASE+0x43))
#define rF_TMC4					(*(volatile byte  *)(FLASH_REG_BASE+0x44))
#define rF_TMC5					(*(volatile byte  *)(FLASH_REG_BASE+0x45))
#define rF_TMC6					(*(volatile byte  *)(FLASH_REG_BASE+0x46))

#define rF_ECCER_EMPTY			(*(volatile byte  *)(FLASH_REG_BASE+0x47))

 
#define rF_REMAP_ENABLE			(*(volatile byte  *)(FLASH_REG_BASE+0x50))
	#define HW_REMAP_ENABLE          (0x01)
	#define TWO_PLANE_REAMP          (0x02)
#define rF_LOGIC_BLK_ADDR		(*(volatile word  *)(FLASH_REG_BASE+0x52))
#define rF_PHY_BLK_ADDR			(*(volatile word  *)(FLASH_REG_BASE+0x54))
#define rF_INSERT_RECORD		(*(volatile byte  *)(FLASH_REG_BASE+0x56))
	#define START_INSERT             (0x80)
	#define INSERT_SUCCESS           (0x80)
#define rF_BLK_ATTRIBUTE		(*(volatile byte  *)(FLASH_REG_BASE+0x57))
	#define NOT_TOSHIBA_5XNM         (0x10)
	#define CLEAR_TABLE              (0x80)

 
#define rPBA0					(*(volatile word  *)(FLASH_REG_BASE+0x58))
#define rPBA1					(*(volatile word  *)(FLASH_REG_BASE+0x5A))
#define rPB_UNSEQ				(*(volatile byte  *)(FLASH_REG_BASE+0x5C))
#define rPB_STS					(*(volatile byte  *)(FLASH_REG_BASE+0x5D))
	#define PB_STS_FOUR              (0x01)
	#define PB_STS_ALL               (0x02)
	#define CONFLICT_BEFORE          (0x04)
	#define CONFLICT_AFTER           (0x08)
	#define AllGSTSsts	             (0x40)
	#define AllGCTSsts               (0x80)
#define rF_FDMAStat				(*(volatile byte  *)(FLASH_REG_BASE+0x5E))
	#define AllFDMAExec              (0x01)
	#define ECC_REFLASH              (0x04)
	#define ECC_MARKBAD              (0x08)
#define rF_ECC_THR				(*(volatile word  *)(FLASH_REG_BASE+0x5E))

 
#define rM_STACK_VALUE			(*(volatile dword *)(FLASH_REG_BASE+0x60))
#define rM_STACK_BLK_ADDR		(*(volatile word  *)(FLASH_REG_BASE+0x60))
#define rM_STACK_INDEX_COUNT	(*(volatile byte  *)(FLASH_REG_BASE+0x62))
#define rM_STACK_FUNC			(*(volatile byte  *)(FLASH_REG_BASE+0x63))
	#define STACK_PUSH               (0x00)
	#define STACK_QUERY              (0x01)
	#define STACK_DELET              (0x02)
	#define STACK_POP_MAX_NOT_DEL    (0x00)
	#define STACK_POP_MAX            (0x02)
	#define STACK_POP_MIN_NOT_DEL    (0x01)
	#define STACK_POP_MIN            (0x03)
	#define STACK_POP_DATA           (0x10)
	#define STACK_PUSH_DATA          (0x20)  
	#define STACK_INIT               (0x40)  
	#define STACK_BUSY               (0x80)
#define rM_STACK_ENTRY			(*(volatile word  *)(FLASH_REG_BASE+0x64))
#define rM_STACK_COMPARE_BIT	(*(volatile word  *)(FLASH_REG_BASE+0x66))
#define rM_STACK_LENGTH			(*(volatile word  *)(FLASH_REG_BASE+0x68))

#define rS_SETMEM_VALUE			(*(volatile dword *)(FLASH_REG_BASE+0x6C))
#define rS_SETMEM_START			(*(volatile word  *)(FLASH_REG_BASE+0x70))
#define rS_SETMEM_CTRL			(*(volatile byte  *)(FLASH_REG_BASE+0x72))
	#define SETMEM_ENABLE            (0x02)
	#define SETMEM_COMPARE           (0x04)
#define rS_SETMEM_LEN			(*(volatile word  *)(FLASH_REG_BASE+0x74))
#define rS_BANK_OE_CTRL			(*(volatile byte  *)(FLASH_REG_BASE+0x78))		 

 
#define rF_NAND_MD				(*(volatile byte  *)(FLASH_REG_BASE+0x7C))
	#define TOGGLE_IF                (0x01)
	#define ONFI_IF                  (0x02)
	#define IM_TYPE                  (0x04)
	#define TOGGLE_DQS				 (0x08)
#define rF_SFTRD_SET			(*(volatile byte  *)(FLASH_REG_BASE+0x7D))
#define rF_SFTRD_TMC			(*(volatile byte  *)(FLASH_REG_BASE+0x7E))
#define rF_NAND_TIMOUT			(*(volatile byte  *)(FLASH_REG_BASE+0x7F))

 

 
#define rF_DRAM_MAP(n)			(*(volatile qword *)(FLASH_REG_BASE+0x80+(n<<4)))
#define rF_DRAM_PTR(n)			(*(volatile dword *)(FLASH_REG_BASE+0x100+(n<<5)))
#define rF_DRAM_MAPDW(n)      (*(volatile dword *)(FLASH_REG_BASE+0x80+(n<<4)))
#define rF_DRAM_MAPDW2(n)      (*(volatile dword *)(FLASH_REG_BASE+0x80+(n<<4)+4))

#define rF_DRAM_MAP1(n)			(*(volatile qword *)(FLASH_REG_BASE+0x80+(n<<4)+8))
#define rF_DRAM_MAPW(n)			(*(volatile qword *)(FLASH_REG_BASE+0x80+(n<<4)))
#define rF_DRAM_PTR1(n)			(*(volatile dword *)(FLASH_REG_BASE+0x100+(n<<5)+4))
#define rF_DRAM_PTRW(n)			(*(volatile qword *)(FLASH_REG_BASE+0x100+(n<<5)))


 
#define rF_DUP_CTRL				(*(volatile byte  *)(FLASH_REG_BASE+0x240))
	#define DUP_ENABLE               (0x1)

 
#define rF_FP_CTRL				(*(volatile byte  *)(FLASH_REG_BASE+0x244))
	#define FP_ENABLE                (0x1)
	#define FP_ENABLE_AES            (0x2)

#define rF_FP_DATA				(*(volatile dword  *)(FLASH_REG_BASE+0x248))

 
#define rF_SFTRD_DATA0			(*(volatile dword *)(FLASH_REG_BASE+0x250))
#define rF_SFTRD_DATA1			(*(volatile dword *)(FLASH_REG_BASE+0x254))

 
#define rF_AES_CTRL				(*(volatile byte  *)(FLASH_REG_BASE+0x25C))
	#define AES_ENABLE               (0x1)
	#define AES_KEY_SEL              (0x2)
	#define AES_KEY_RDY              (0x4)
#define rF_AES_KEY0				(*(volatile dword *)(FLASH_REG_BASE+0x260))
#define rF_AES_KEY1				(*(volatile dword *)(FLASH_REG_BASE+0x264))
#define rF_AES_KEY2				(*(volatile dword *)(FLASH_REG_BASE+0x268))
#define rF_AES_KEY3				(*(volatile dword *)(FLASH_REG_BASE+0x26C))
#define rF_AES_KEY4				(*(volatile dword *)(FLASH_REG_BASE+0x270))
#define rF_AES_KEY5				(*(volatile dword *)(FLASH_REG_BASE+0x274))
#define rF_AES_KEY6				(*(volatile dword *)(FLASH_REG_BASE+0x278))
#define rF_AES_KEY7				(*(volatile dword *)(FLASH_REG_BASE+0x27C))

 
#define rF_19NM_RAND_SEED_2A0			(*(volatile dword *)(FLASH_REG_BASE+0x2A0))
  #define HW_FIX_SEED							(0x00008000)  
  #define HW_PBN_SEED							(0x00000000)  
	#define SCRAMBLE_FULL_PAGE			(0x00002000)  
	#define DEFAULT_HW_SEED					(0x00001000)
  #define SCRAMBLE_FULL_PAGE	   (0x00002000)             
  #define DEFAULT_HW_SEED		   (0x00001000)             
  #define EN_VTH_REGISTER		   (0x00000400)
#define rF_RETRY_READ_CTRL_2A4	 (*(volatile dword *)(FLASH_REG_BASE+0x2A4))
  #define TSB_SFRD_END_PRE_DIS	   (0x00000400)	 
  #define TSB_PRE_SFRD_DIS		   (0x00000200)	 
  #define TSB_SHIFT_READ_EN		   (0x00000100)
  #define SMS_RETRY_READ_EN		   (0x00000080)
  #define IM_RETRY_READ_EN		   (0x00000040)
  #define RETRY_READ_WAIT_TIME	   (0x00000001) 	 
 
#define rF_VTH_SFRD_RETRY1		 (*(volatile dword *)(FLASH_REG_BASE+0x2C0))
#define rF_VTH_SFRD_RETRY2		 (*(volatile dword *)(FLASH_REG_BASE+0x2C4))
#define rF_VTH_SFRD_RETRY3		 (*(volatile dword *)(FLASH_REG_BASE+0x2C8))
#define rF_VTH_SFRD_RETRY4		 (*(volatile dword *)(FLASH_REG_BASE+0x2CC))
#define rF_VTH_SFRD_RETRY5		 (*(volatile dword *)(FLASH_REG_BASE+0x2D0))
#define rF_VTH_SFRD_RETRY6		 (*(volatile dword *)(FLASH_REG_BASE+0x2D4))
#define rF_VTH_SFRD_RETRY7		 (*(volatile dword *)(FLASH_REG_BASE+0x2D8))
#define rF_VTH_SFRD_RETRY8		 (*(volatile dword *)(FLASH_REG_BASE+0x2DC))
#define rF_VTH_SFRD_RETRY9		 (*(volatile dword *)(FLASH_REG_BASE+0x2E0))
#define rF_VTH_SFRD_RETRY10		 (*(volatile dword *)(FLASH_REG_BASE+0x2E4))

 
 
#define rF0_FMPCP				(*(volatile word  *)(FLASH_REG_BASE+0x300))
#define rF0_FMPAP				(*(volatile word  *)(FLASH_REG_BASE+0x302))
#define rF0_FMPDP				(*(volatile word  *)(FLASH_REG_BASE+0x304)) 
#define rF0_FMROWP				(*(volatile byte  *)(FLASH_REG_BASE+0x306))

 
#define rF0_COL_ADDR1			(*(volatile byte  *)(FLASH_REG_BASE+0x307))
#define rF0_COL_ADDR2			(*(volatile byte  *)(FLASH_REG_BASE+0x308))
#define rF0_ROW_ADDR1			(*(volatile byte  *)(FLASH_REG_BASE+0x309))
#define rF0_ROW_ADDR2			(*(volatile byte  *)(FLASH_REG_BASE+0x30A))
#define rF0_ROW_ADDR3			(*(volatile byte  *)(FLASH_REG_BASE+0x30B))
#define rF0_FLASH_ADDR			(*(volatile dword *)(FLASH_REG_BASE+0x308))

 
#define rF0_FEXE				(*(volatile byte  *)(FLASH_REG_BASE+0x30C))
#define rF0_FDMA_CTL			(*(volatile word  *)(FLASH_REG_BASE+0x30C))
	#define FEXE_ENABLE              (0x0001)
	#define FEXE_F2B                 (0x0002)
	#define FEXE_DIRECT              (0x0004)
	#define FEXE_SPARE_DMA           (0x0008)
	#define FEXE_COPYBACK            (0x0010)
	#define FEXE_MULTI_PAGE          (0x0020)
	#define FEXE_COL_AUTO            (0x0040)
	#define FEXE_FRC_2PL             (0x0080)
	#define FDMA_PROG_CONFIRM        (0x0100)
	#define FDMA_OVERLAP_EN          (0x0200)
	#define FDMA_2PLANE_CMD_EN       (0x0400)
	#define FDMA_RDCMD_ONLY          (0x0800)
	#define FDMA_WRCMD_ONLY          (0x1000)
	#define FDMA_BUF_MODE            (0x2000)
	#define FDMA_BITMAP_EN           (0x4000)
	#define FDMA_BITMAP_INVERT       (0x8000)
	#define FEXE_READ_DMA            (FEXE_ENABLE | FEXE_F2B | FEXE_COL_AUTO | FDMA_OVERLAP_EN | FDMA_2PLANE_CMD_EN)
	#define FEXE_PROG_DMA            (FEXE_ENABLE | FEXE_COL_AUTO | FDMA_PROG_CONFIRM | FDMA_OVERLAP_EN | FDMA_2PLANE_CMD_EN)
#define rF0_FDMA_SET			(*(volatile byte  *)(FLASH_REG_BASE+0x30E))
	#define FDMA_ROW_LOC             (0x01)
	#define FDMA_ROW_TYPE            (0x02)
	#define FDMA_CACHE_EN            (0x04)
	#define FDMA_FRC_PATT            (0x08)
	#define FDMA_FRC_WAIT            (0x10)
	#define FDMA_WAIT_MODE           (0x20)
	#define FDMA_CMPR_SBUF           (0x40)
	#define FDMA_CMPR_NAND           (0x80)

#ifdef NEW_FUNCTION
	#define FDMA_DEFAULT             (FDMA_FRC_PATT)
#else
	#define FDMA_DEFAULT             (0x0)
#endif
 
#define rF0_FDMA_OFST			(*(volatile byte  *)(FLASH_REG_BASE+0x30F))
#define rF0_FDMA_MASK			(*(volatile word  *)(FLASH_REG_BASE+0x310))
#define rF0_FDSZ				(*(volatile word  *)(FLASH_REG_BASE+0x312))
#define rF0_FSBP				(*(volatile dword *)(FLASH_REG_BASE+0x314))
#define rF0_FSB_CTRL			(*(volatile byte *)(FLASH_REG_BASE+0x317)) 
	#define FDMA_HALT_KICKOFF       (0x80)
	
 
#define rF0_SCRAMBLE_CTRL		(*(volatile byte  *)(FLASH_REG_BASE+0x319))
	#define FW_SEED_ENABLE			(0x80)
#define rF0_SCRAMBLE_SEED		(*(volatile word  *)(FLASH_REG_BASE+0x31A))
	#define FW_SEED_DEFAULT			(0x00)

 
 
#define rF0_FRC_DQS				(*(volatile byte  *)(FLASH_REG_BASE+0x31C))
	#define TOGGLE_HOLD				(0x08)
#define rF0_DDR_TMC0			(*(volatile byte  *)(FLASH_REG_BASE+0x31D))
#define rF0_DDR_TMC1			(*(volatile byte  *)(FLASH_REG_BASE+0x31E))
#define rF0_DDR_TMC2			(*(volatile byte  *)(FLASH_REG_BASE+0x31F))

 
#define rF0_ECC_CLR				(*(volatile byte  *)(FLASH_REG_BASE+0x320))
#define rF0_ECC_CS(n)			(*(volatile byte  *)(FLASH_REG_BASE+0x320+n))
#define rF0_ECC_CSDW(n)       (*(volatile dword  *)(FLASH_REG_BASE+0x320+4*n))      
#define rF0_ECC_GSTS			(*(volatile dword *)(FLASH_REG_BASE+0x340))
#define rF0_ECC_GCTS			(*(volatile dword *)(FLASH_REG_BASE+0x344))
#define rF0_ECC_GFTS			(*(volatile dword *)(FLASH_REG_BASE+0x348))
#define rF0_ECC_GRTS			(*(volatile dword *)(FLASH_REG_BASE+0x34C))

#define rF0_RETRY_CNT0			(*(volatile dword *)(FLASH_REG_BASE+0x350))
#define rF0_RETRY_CNT1			(*(volatile dword *)(FLASH_REG_BASE+0x354))
#define rF0_RETRY_CNT2			(*(volatile dword *)(FLASH_REG_BASE+0x358))
#define rF0_RETRY_CNT3			(*(volatile dword *)(FLASH_REG_BASE+0x35C))
#define rF0_RETRY_CNT(n)      (*(volatile dword *)(FLASH_REG_BASE+0x350+4*n))

#define rF0_SPARE_CTRL			(*(volatile byte  *)(FLASH_REG_BASE+0x36C))
	#define SPARE_CRC_OK             (0x01)
	#define DMA_CRC_OK               (0x02)

#define rF0_BANK_SEL			(*(volatile byte  *)(FLASH_REG_BASE+0x370))
#define ACT_BANK_SEL			(rF_BANK_SEL(0)&0x0F)




 
 
#define rF_DRAM_REG0			(*(volatile dword *)(FLASH_REG_BASE+0x400))
#define rF_DRAM_REG1			(*(volatile dword *)(FLASH_REG_BASE+0x404))
#define rF_DRAM_REG2			(*(volatile dword *)(FLASH_REG_BASE+0x408))
#define rF_DRAM_REG3			(*(volatile dword *)(FLASH_REG_BASE+0x40C))
#define rF_DRAM_REG4			(*(volatile dword *)(FLASH_REG_BASE+0x43C))

#define rF_DRAMIF				(*(volatile byte  *)(FLASH_REG_BASE+0x400))
	#define CS_ENABLE                (0x01)
	#define CKE_ENABLE               (0x02)
	#define ODT_ENABLE               (0x04)
	#define RE_INITIALIZE            (0x08)
	#define FIFO_CLEAR               (0x10)
#define rF_DRAMTR_DW			(*(volatile dword *)(FLASH_REG_BASE+0x40C))
#define rF_DRAM_RFL				(*(volatile byte  *)(FLASH_REG_BASE+0x40D))
#define rF_DRAMLMTCTRL			(*(volatile byte  *)(FLASH_REG_BASE+0x40E))
#define rF_DRAMLMTTHR			(*(volatile byte  *)(FLASH_REG_BASE+0x40F))
#define rF_DRAMRR				(*(volatile byte  *)(FLASH_REG_BASE+0x410))
	#define AHB_ADDRESS_ROM          (0x04)
	#define REMAP_ADDRESS            (0x01)
#define rF_DRAMBUSR				(*(volatile byte  *)(FLASH_REG_BASE+0x411))
	#define AHB2_NEW_ABR_ALG         (0x01)
	#define AHB_512B_BURST           (0x02)
	#define USBDMA_MODE              (0x04)
	#define AHB2_WAIT                (0x10)
	#define ONE_DMA_WAIT             (0x20)
	#define BURST_WAIT               (0x40)
	#define GRANT_WAIT               (0x80)
#define rF_DRAMAHB2WGHT			(*(volatile byte  *)(FLASH_REG_BASE+0x413))
#define rDDR_REG				(*(volatile byte  *)(FLASH_REG_BASE+0x415))
#define rDDR_DRIVING			(*(volatile byte  *)(FLASH_REG_BASE+0x416))
#define rDDR_ODT				(*(volatile byte  *)(FLASH_REG_BASE+0x417))

#define rF_BIT_SRC				(*(volatile dword  *)(FLASH_REG_BASE+0x418))
#define rF_BIT_SUM				(*(volatile byte  *)(FLASH_REG_BASE+0x418))
#define rF_BIT_LSB				(*(volatile byte  *)(FLASH_REG_BASE+0x41A))
#define rF_BTI_MSB				(*(volatile byte  *)(FLASH_REG_BASE+0x41B))

 
#define rF_DRAM_TIMEOUT			(*(volatile byte  *)(FLASH_REG_BASE+0x41C))   
	#define DRAM_TOUT_EN_MASK        (0x07)
	#define DRAM_TOUT_EN             (0x01)
	#define DRAM_TOUT_TH_MASK        (0x70)
	#define DRAM_TOUT_TH             (0x40)
#define rLED_SPEED				(*(volatile byte  *)(FLASH_REG_BASE+0x41E))
#define rLED					(*(volatile byte  *)(FLASH_REG_BASE+0x41F))
	#define LED1_ENABLE              (0x01)   
	#define LED2_ENABLE              (0x02)   
	#define MGPIO_GPIO               (0x04)
	#define MGPIO_FUN1               (0x08)	  
	#define MGPIO_FUNC1              (0x08)   
#define rF_VERSION				(*(volatile byte  *)(FLASH_REG_BASE+0x420))   
#define rIO_DRIVE				(*(volatile byte  *)(FLASH_REG_BASE+0x421))   
	#define DRIVE_MASK               (0x07)
	#define DRIVE_2mA                (0x00)
	#define DRIVE_4mA                (0x01)
	#define DRIVE_6mA                (0x02)
	#define DRIVE_8mA                (0x03)
	#define DRIVE_10mA               (0x04)
	#define DRIVE_12mA               (0x05)
	#define DRIVE_14mA               (0x06)
	#define DRIVE_16mA               (0x07)
#define rRST_CTRL				(*(volatile byte  *)(FLASH_REG_BASE+0x422))
	#define COMRESET_BIT             (0x08)
#define rG_CHAN_GATING			(*(volatile byte  *)(FLASH_REG_BASE+0x423))   
   #define DIS_4CH_BCH							(0xF0)  
#define timer_1ms_L				(*(volatile byte  *)(FLASH_REG_BASE+0x424))   
#define timer_1ms_H				(*(volatile byte  *)(FLASH_REG_BASE+0x425))   

#define rFDMA_DBG_CTL			(*(volatile byte  *)(FLASH_REG_BASE+0x426))
#define rFDMA_INDEX				(*(volatile byte  *)(FLASH_REG_BASE+0x427)) 
#define rFDMA_STATE				(*(volatile byte  *)(FLASH_REG_BASE+0x42B)) 

 
#define rSYS_PIN				(*(volatile byte  *)(FLASH_REG_BASE+0x439))
	#define SYS_CLOCK_SEL2			(0x40)		 
	#define EN_75MHZ                 (0x40)
	#define MAK_FLASH_MODE1				(0x80)
	#define MAK_FLASH_MODE2				(0x10)	
#define rCLOCK_RATE				(*(volatile byte  *)(FLASH_REG_BASE+0x43A))
	#define CLOCK_RATE_MASK          (0x03)
 
 	
	#define CLOCK_500MHZ			(0x00)
	#define CLOCK_375MHZ			(0x01)
	#define CLOCK_300MHZ			(0x02)
	#define CLOCK_250MHZ			(0x03)
	#define CLOCK_187_5MHZ			CLOCK_500MHZ
	#define CLOCK_150MHZ			CLOCK_375MHZ
	#define CLOCK_SATA				CLOCK_300MHZ
	#define CLOCK_25MHZ				CLOCK_250MHZ
	
	  
  #define SYS_CLOCK_500MHZ        (0x00)
  #define SYS_CLOCK_375MHZ        (0x01)
  #define SYS_CLOCK_300MHZ        (0x02)
  #define SYS_CLOCK_250MHZ        (0x03)
  #define SYS_CLOCK_187MHZ        (0x04)
  #define SYS_CLOCK_150MHZ        (0x05)
  #define SYS_CLOCK_166MHZ         (0x06)
  #define SYS_CLOCK_25MHZ          (0x07)
  
	
#define rF_DQSI_DLY				(*(volatile dword *)(FLASH_REG_BASE+0x444))
#define rF_DQSO_DLY				(*(volatile dword *)(FLASH_REG_BASE+0x448))

#define rF_PAD_DRIVING			(*(volatile byte *)(FLASH_REG_BASE+0x44C))

#define rF_NAND_PAD				(*(volatile byte *)(FLASH_REG_BASE+0x44E))
	#define POWER_DOWN               (0xFF)
	#define DIS_4CH_IOPWR				(0xF0)  

#define rF_NAND_SET				(*(volatile byte  *)(FLASH_REG_BASE+0x44F))
	#define SMT_ENABLE				(0x38)

#define rF_GPIO_OPD				(*(volatile word  *)(FLASH_REG_BASE+0x450))
#define rF_DLL_PD               (*(volatile byte  *)(FLASH_REG_BASE+0x452))
#define rF_NAND_IO_DRV          (*(volatile byte  *)(FLASH_REG_BASE+0x453))
#define rF_PAD_DRIVING2			(*(volatile byte  *)(FLASH_REG_BASE+0x453))
#define rF_DQS_DLL				(*(volatile byte  *)(FLASH_REG_BASE+0x454))
#define rF_DLL_SEL				(*(volatile byte  *)(FLASH_REG_BASE+0x456))
#define rF_IO_PD_SEL			(*(volatile byte  *)(FLASH_REG_BASE+0x457))  

 
#define rF_exTMC0_TWH                  (*(volatile byte  *)(FLASH_REG_BASE+0x500))
#define rF_exTMC0_TWP                  (*(volatile byte  *)(FLASH_REG_BASE+0x501))
#define rF_exTMC1_REH                  (*(volatile byte  *)(FLASH_REG_BASE+0x502))
#define rF_exTMC1_TRP                  (*(volatile byte  *)(FLASH_REG_BASE+0x503))
#define rF_exTMC2_ALS                  (*(volatile byte  *)(FLASH_REG_BASE+0x504))
#define rF_exTMC2_ALH                  (*(volatile byte  *)(FLASH_REG_BASE+0x505))
#define rF_exTMC3_TCW                  (*(volatile byte  *)(FLASH_REG_BASE+0x506))
#define rF_exTMC3_RTM                  (*(volatile byte  *)(FLASH_REG_BASE+0x507))
#define rF_exTMC4_CLR                  (*(volatile byte  *)(FLASH_REG_BASE+0x508))
#define rF_exTMC4_TWB                  (*(volatile byte  *)(FLASH_REG_BASE+0x509))
#define rF_exTMC5_RHW                  (*(volatile byte  *)(FLASH_REG_BASE+0x50A))
#define rF_exTMC5_WHR                  (*(volatile byte  *)(FLASH_REG_BASE+0x50B))
#define rF_exTMC6_ADL                  (*(volatile byte  *)(FLASH_REG_BASE+0x50C))
#define rF_exTMC6_BSY                  (*(volatile byte  *)(FLASH_REG_BASE+0x50D))

#define rF_exSFTRD_TMC_WPV             (*(volatile byte  *)(FLASH_REG_BASE+0x510))
#define rF_exSFTRD_TMC_WHV             (*(volatile byte  *)(FLASH_REG_BASE+0x511))
#define rF_exNAND_TMC_WAW							 (*(volatile byte  *)(FLASH_REG_BASE+0x512))

 
#define rF0_SECTBUF_W(n)		(*(volatile word  *)(FLASH_MEM_BASE+(n)))
#define rF0_SECTBUF_DW(n)		(*(volatile dword *)(FLASH_MEM_BASE+(n)))

 
#define rF0_SPARE_B(c, n)		(*(volatile byte  *)(FLASH_SPA_BASE + (c<<10) + ((n>>2)<<4) + (n&0x03)))
#define rF0_SPARE_W(c, n)		(*(volatile word  *)(FLASH_SPA_BASE + (c<<10) + ((n>>1)<<4) + (n&0x01)))
#define rF0_SPARE_D(c, n)		(*(volatile dword *)(FLASH_SPA_BASE + (c<<10) + (n<<4)))

 #define rGPIO_PORT0_DATA0		(*(volatile byte  *)(GPIO_REG_BASE+0x00))
#define rGPIO_DATA				(*(volatile dword  *)(GPIO_REG_BASE+0x04))  
	 
	#define FLASH_POWER_BIT		(1 << 6)
	#define SATA_PHY_BIT			(1 << 7)
	#define DAS_BIT				(1 << 5)  

 
#define SSD_DEVSLP_BIT		   (1 << 12)
#define DRAM_POWER_BIT			((1 << 6))  

#define rGPIO_DIRECTION			(*(volatile dword  *)(GPIO_REG_BASE+0x08))  
#define rGPIO_CONTROL_1       (*(volatile dword  *)(GPIO_REG_BASE+0x10))  
#define rGPIO_CONTROL_2       (*(volatile dword  *)(GPIO_REG_BASE+0x14))  
#define rGPIO_CONTROL_3       (*(volatile dword  *)(GPIO_REG_BASE+0x18))  

#define SBUF0					(*(volatile byte *)(UART_REG_BASE+0x00))

#define RBR						(*(volatile byte *)(UART_REG_BASE+0x00))   
#define THR						(*(volatile byte *)(UART_REG_BASE+0x00))   
#define IER						(*(volatile byte *)(UART_REG_BASE+0x04))   
	#define IER_TEMP_bit             (1 << 1)                                 
	#define IER_RDRDY_bit            (1 << 0)                                 
#define IIR						(*(volatile byte *)(UART_REG_BASE+0x08))   
#define FCR						(*(volatile byte *)(UART_REG_BASE+0x08))   
#define LCR						(*(volatile byte *)(UART_REG_BASE+0x0C))   
	#define LCR_LEN_bit              (3 << 0)
	#define LCR_STOP_bit             (0 << 2)
	#define LCR_PARITY_bit           (0 << 3)
	#define LCR_DLAB_bit             (1 << 7)
#define MCR						(*(volatile byte *)(UART_REG_BASE+0x10))   
	#define MCR_LOOP_bit             (1 << 4)
#define LSR						(*(volatile byte *)(UART_REG_BASE+0x14))   
#define MSR						(*(volatile byte *)(UART_REG_BASE+0x18))   
#define SCR						(*(volatile byte *)(UART_REG_BASE+0x1C))   
#define DLL						(*(volatile byte *)(UART_REG_BASE+0x00))   
#define DLM						(*(volatile byte *)(UART_REG_BASE+0x04))   

#define REG_TCSR(n)				(*(volatile dword *)(TMR_REG_BASE+0x00+(n<<2)))
#define REG_TPR(n)				(*(volatile dword *)(TMR_REG_BASE+0x10+(n<<2)))
#define REG_TCR(n)				(*(volatile dword *)(TMR_REG_BASE+0x20+(n<<2)))
#define REG_TISR				(*(volatile dword *)(TMR_REG_BASE+0x30))
#define REG_TISR_RAW			(*(volatile dword *)(TMR_REG_BASE+0x34))

#define REG_FIQ					(*(volatile dword *)(INTC_REG_BASE+0x00))
#define REG_IRQ					(*(volatile dword *)(INTC_REG_BASE+0x04))
#define REG_FIQE				(*(volatile dword *)(INTC_REG_BASE+0x08))
#define REG_IRQE				(*(volatile dword *)(INTC_REG_BASE+0x0C))
#define REG_IMR					(*(volatile dword *)(INTC_REG_BASE+0x10))
#define REG_MECR				(*(volatile dword *)(INTC_REG_BASE+0x14))
#define REG_EBA					(*(volatile dword *)(INTC_REG_BASE+0x18))
#define REG_TEST				(*(volatile dword *)(INTC_REG_BASE+0x1C))
#define REG_SCR(n)				(*(volatile dword *)(INTC_REG_BASE+0x40+(n<<2)))

 
#define REG_SPI_DW0           (*(volatile dword *)(SPI_REG_BASE+0x00))       
#define REG_SPI_DW1           (*(volatile dword *)(SPI_REG_BASE+0x04)) 
#define REG_SPI_DW2           (*(volatile dword *)(SPI_REG_BASE+0x08)) 

#endif
